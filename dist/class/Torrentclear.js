import{execSync}from"node:child_process";import{lstatSync}from"node:fs";import{normalize,extname}from"node:path";import{schedule}from"node-cron";import cronParser from"cron-parser";class Torrentclear{config;logger;connect;regexSuccess=/success/i;constructor(e,t){this.config=e,this.logger=t,this.connect=this.connectCommandCreate()}main(){this.cronInit()}async clearProcess(){try{var e=this.getIDs();await this.checkTorrents(e)}catch(e){throw e}}cronInit(){this.logger.info("##############################################################################################"),this.logger.info(`NodeCron task "${this.config.cronExpression}" SETUP`);var e=schedule(this.config.cronExpression,async()=>{try{await this.clearProcess();var e=cronParser.parseExpression(this.config.cronExpression),t=Torrentclear.dateFormat(Date.parse(e.next().toString()));this.logger.info(`NodeCron task "${this.config.cronExpression}" END. Next tick [${t}]`),this.logger.info("##############################################################################################\n")}catch(e){this.config.devmode?this.logger.trace(e.message,e.stack):this.logger.error(e.message),this.logger.info("##############################################################################################\n")}},{scheduled:!1,timezone:Torrentclear.getTimeZone()}),t=cronParser.parseExpression(this.config.cronExpression),t=Torrentclear.dateFormat(Date.parse(t.next().toString()));this.logger.info(`NodeCron task START at [${t}]`),this.logger.info("##############################################################################################"),e.start()}getIDs(){var e=this.connect+" -l";this.logger.debug(`Run command: "${e}"`);var e=Torrentclear.command(e).toString().split(/\r\n|\r|\n/gm),t=(e.shift(),e.pop(),e.pop(),[]);this.logger.debug("Torrent list:");for(const o of e){this.logger.debug(`torrent: "${o}"`);var r=o.match(/^\s+(\d+).+$/i);null!==r&&(r=r[1],this.logger.debug(`ID found: "${r}"`),t.push(r))}return 0<t.length?this.logger.info("IDs found: "+t.join(", ")):this.logger.info("IDs not found"),t}async checkTorrents(e){try{if(0<e.length){this.logger.info("==============================================================================================");for(const r of e){this.logger.info(`TORRENT ID: "${r}" START PROCESS ...`);var t=await this.getTorrentInfo(r);100===t.percent?this.checkRatio(t.ratio)?(this.logger.debug("==> ACTION: Torrent delete on Ratio Limit"),await this.delete(r,t),this.logger.info(`Stopping and deleting a torrent "${t.name}" by ratio limit completed successfully`)):this.checkDateDifference(t.dateDifference)?(this.logger.debug("==> ACTION: Torrent delete on Date Difference"),await this.delete(r,t),this.logger.debug(`Stopping and deleting a torrent "${t.name}" by datetime limit completed successfully`)):(this.logger.info("NO ACTION NEEDED"),this.logger.info("==============================================================================================")):(this.logger.info("NO ACTION NEEDED"),this.logger.info("=============================================================================================="))}}}catch(e){throw e}}async delete(e,t){try{this.torrentStop(e,t.name),await this.checkFileOrDirectory(e,t)}catch(e){throw e}}async checkFileOrDirectory(e,t){try{var r,o=normalize(t.location+"/"+t.name),n=await Torrentclear.isFileOrDirectoryOrUnknown(o);!0===n?(r=extname(o),this.logger.info(`Torrent: "${t.name}" is a FILE`),this.logger.debug(`Torrent: file extension: "${r}"`),this.config.allowedMediaExtensions.test(r)?await this.torrentRemove(e,t.name):(this.logger.debug(`Torrent: file extension "${r}" does not match allowed extensions regex: "${this.config.allowedMediaExtensions}"`),this.logger.info("Torrent does not match allowed extensions. NO ACTION"))):!1===n?(this.logger.info(`Torrent: "${t.name}" is a DIRECTORY`),this.logger.debug(`Torrent: full path: "${o}"`),await this.torrentRemoveAndDelete(e,t.name)):(this.logger.debug(`Torrent: "${t.name}" is neither a file or a directory`),this.logger.debug(`Torrent: full path: "${o}"`))}catch(e){throw e}}torrentStop(e,t){var r=this.connect+` -t ${e} -S`,r=(this.logger.debug(`Stop torrent: (${e}) "${t}"`),this.logger.debug(`Run command: "${r}"`),Torrentclear.command(r).replace(/(\r\n|\n|\r)/gm,""));if(this.logger.debug("execResultStop: "+r),!this.regexSuccess.test(r))throw new Error(`Failed to stop torrent (${e}) "${t}". Reason: Negative result of exec command: `+r)}async torrentRemove(e,t){try{var r=this.connect+` -t ${e} -r`,o=(this.logger.debug(`Remove torrent without deleting file: (${e}) "${t}"`),this.logger.debug(`Run command: "${r}"`),Torrentclear.command(r).replace(/(\r\n|\n|\r)/gm,""));if(this.logger.debug("execResult: "+o),!this.regexSuccess.test(o))throw new Error(`Failed to remove (no del) torrent (${e}) "${t}". Reason: Negative result of exec command: `+o)}catch(e){throw e}}async torrentRemoveAndDelete(e,t){try{var r=this.connect+` -t ${e} --remove-and-delete`,o=(this.logger.debug(`Remove torrent with deleting file: (${e}) "${t}"`),this.logger.debug(`Run command: "${r}"`),Torrentclear.command(r).replace(/(\r\n|\n|\r)/gm,""));if(this.logger.debug("execResult: "+o),!this.regexSuccess.test(o))throw new Error(`Failed to remove and delete torrent (${e}) "${t}". Reason: Negative result of exec command: `+o)}catch(e){throw e}}checkRatio(e){return e>=this.config.ratioLimit&&(this.logger.info(`Torrent has reached the Ratio limit: "${e}" >= "${this.config.ratioLimit}"`),!0)}checkDateDifference(e){return e>=this.config.limitTime&&(this.logger.info(`Torrent has reached the Date difference limit: "${e}" >= "${this.config.limitTime}"`),!0)}async getTorrentInfo(e){try{var t=this.connect+` -t ${e} -i`;this.logger.debug(`Run command: "${t}"`);var r=Torrentclear.command(t).toString().matchAll(/Name\:\s(.+)|Date\sfinished\:\s+(.+)|Percent\sDone\:\s(.+)\%|Ratio\:\s(.+)|State\:\s(.+)|Location\:\s(.+)/g),o=Array.from(r),n=o[0][1];if(void 0===n)throw new Error(`Required data not found in torrent info - ID: "${e}"`);var i=Date.parse(o[5][2]),s=Date.now(),a={name:n,state:o[1][5],location:o[2][6],percent:Number(o[3][3]),ratio:Number(o[4][4]),dateDone:Torrentclear.dateFormat(i),dateDifference:Math.round((s-i)/1e3)};return this.logger.debug(`Torrent ID "${e}" info:`),this.logger.debug(`   Name: "${a.name}"`),this.logger.debug(`   State: "${a.state}"`),this.logger.debug(`   Location: "${a.location}"`),this.logger.debug(`   Percent Done: "${a.percent}%"`),this.logger.debug(`   Ratio: "${a.ratio}" | limit: "${this.config.ratioLimit}"`),this.logger.debug(`   Date finished: "${a.dateDone}"`),this.logger.debug(`   Date Difference: "${a.dateDifference}" | limit: "${this.config.limitTime}"`),a}catch(e){throw e}}connectCommandCreate(){return`transmission-remote ${this.config.ipAddress}:${this.config.port} -n ${this.config.login}:`+this.config.password}static getTimeZone(){return Intl.DateTimeFormat().resolvedOptions().timeZone}static command(e){return execSync(e,{timeout:2e3,encoding:"utf8"})}static dateFormat(e){var e=new Date(e),t=9<e.getDate()?e.getDate():"0"+e.getDate(),r=e.getMonth()+1;return t+`.${9<r?r:"0"+r}.${e.getFullYear()} ${9<e.getHours()?e.getHours():"0"+e.getHours()}:${9<e.getMinutes()?e.getMinutes():"0"+e.getMinutes()}:`+(9<e.getSeconds()?e.getSeconds():"0"+e.getSeconds())}static async isFileOrDirectoryOrUnknown(e){try{var t=lstatSync(e),r=t.isFile(),o=t.isDirectory();return r?!0:!o&&void 0}catch(e){throw e}}}export{Torrentclear};