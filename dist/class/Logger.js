import{createLogger,format,transports}from"winston";const addColorsOption={levels:{trace:4,debug:3,info:2,warn:1,error:0},colors:{trace:"gray",debug:"white",info:"green",warn:"yellow",error:"red"}};class Logger{logger;transportConsole;transportFile;constructor(r,e,t){t=format.combine(format.timestamp({format:t||"DD.MM.YYYY HH:mm:ss"}),format.printf(r=>{const{level:e,message:t,timestamp:o,...s}=r;return`[${o}] : [${e}] : `+t+(r=>{r=r[Symbol.for("splat")];return void 0!==r[0]&&0<r.length?1===r.length?` - [${JSON.stringify(r[0])}]`:` - [${JSON.stringify(r)}]`:""})(s)}));this.transportConsole=new transports.Console({format:t}),this.transportFile=new transports.File({filename:e,format:t}),this.logger=createLogger({level:r,levels:addColorsOption.levels,transports:[this.transportConsole,this.transportFile]})}trace(r,e){this.logger.log("trace",r,e)}debug(r,e){this.logger.debug(r,e)}info(r,e){this.logger.info(r,e)}warn(r,e){this.logger.warn(r,e)}error(r,e){this.logger.error(r,e)}normalizeError(r){var e={err:r,message:"",isError:!1,toString(){return this.message}};return r instanceof TypeError?(e.error=r,e.message=r.message,e.stack=r.stack,e.isError=!0,e.toString=()=>r.toString()):"string"==typeof r?(e.error=new Error(r),e.message=r,e.stack=e.error.stack):r instanceof Error?(e.error=r,e.message=r.message,e.stack=r.stack,e.isError=!0,e.toString=()=>r.toString()):this.error("UNKNOWN ERROR TYPE: "+typeof r),e}}export{Logger};