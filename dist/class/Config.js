import{normalize,dirname,join}from"node:path";import{fileURLToPath}from"node:url";import{existsSync}from"node:fs";import nconf from"nconf";class Config{rootPath=normalize(join(dirname(fileURLToPath(import.meta.url)),"../.."));nconf=nconf;devmode;appVersion;logLevel;dateFormat;logFilePath;ipAddress;port;login;password;limitTime;settingsFilePath;ratioEnabled=!1;ratioLimit=2;allowedMediaExtensions;constructor(t){this.init(t),this.login=this.getParam("login"),this.password=this.getParam("password"),this.devmode="development"===this.getParam("node_env"),this.appVersion=this.getParam("version"),this.logLevel=this.devmode?"trace":this.getParam("log_level"),this.dateFormat=this.getParam("date_format"),this.logFilePath=this.getParam("log_file_path"),this.ipAddress=this.getParam("ip_address"),this.port=Number(this.getParam("tcp_port")),this.limitTime=Number(this.getParam("limit_time")),this.settingsFilePath=this.getParam("settings_file_path"),this.allowedMediaExtensions=Config.extensionsRegexTemplate(this.getParam("allowed_media_extensions")),this.setRatio()}init(t){let i=normalize(this.rootPath+"/config.json");void 0!==t&&(i=t),this.nconf.env(),this.nconf.file("config",i),this.nconf.file("package",normalize(this.rootPath+"/package.json")),this.nconf.defaults({node_env:"production",log_level:"info",log_file_path:"/var/log/transmission/torrentclear.log",date_format:"DD.MM.YYYY HH:mm:ss",ip_address:"127.0.0.1",tcp_port:"9091",limit_time:"604800",settings_file_path:"/etc/transmission-daemon/settings.json",cron_expression:"0 * * * *",allowed_media_extensions:"mkv,mp4,avi"}),this.nconf.load(),this.check(),this.settingsFileExists();t=normalize(this.getParam("settings_file_path"));this.nconf.file("transmission",t),this.nconf.load()}setRatio(){this.ratioEnabled=Boolean(this.getParam("ratio-limit-enabled")),this.ratioEnabled&&(this.ratioLimit=Number(this.getParam("ratio-limit")))}check(){var t=this.getParam("login"),i=this.getParam("password");if(void 0===t||void 0===i)throw new Error("Login or password must be filled in config file or Environment")}getParam(t){let i=this.nconf.get(t);return i=void 0===i?this.nconf.get(t.toUpperCase()):i}settingsFileExists(){var t=normalize(this.getParam("settings_file_path"));if(!existsSync(t))throw new Error("Transmission settings file not found on path "+t)}static extensionsRegexTemplate(t){var i=t.split(",");let e=".(";if(1<i.length)for(const s in i)0===Number(s)?e+=i[s]+"|":Number(s)===i.length-1?e+="|"+i[s]:e+=i[s];else e+=i[0];return e+=")",new RegExp(e,"i")}}export{Config};