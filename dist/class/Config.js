import{normalize,dirname,join}from"node:path";import{fileURLToPath}from"node:url";import{existsSync}from"node:fs";import nconf from"nconf";class Config{rootPath=normalize(join(dirname(fileURLToPath(import.meta.url)),"../.."));devmode;logLevel;dateFormat;logFilePath;ipAddress;port;login;password;limitTime;settingsFilePath;ratioEnabled=!1;ratioLimit=2;allowedMediaExtensions;constructor(i){this.init(i),this.login=Config.getParam("login"),this.password=Config.getParam("password"),this.devmode="development"===Config.getParam("node_env"),this.logLevel=this.devmode?"trace":Config.getParam("log_level"),this.dateFormat=Config.getParam("date_format"),this.logFilePath=Config.getParam("log_file_path"),this.ipAddress=Config.getParam("ip_address"),this.port=Number(Config.getParam("tcp_port")),this.limitTime=Number(Config.getParam("limit_time")),this.settingsFilePath=Config.getParam("settings_file_path"),this.allowedMediaExtensions=Config.extensionsRegexTemplate(Config.getParam("allowed_media_extensions")),this.setRatio()}init(i){let t=normalize(this.rootPath+"/config.json");void 0!==i&&(t=i),nconf.env(),nconf.file("config",t),nconf.defaults({node_env:"production",log_level:"info",log_file_path:"/var/log/transmission/torrentclear.log",date_format:"DD.MM.YYYY HH:mm:ss",ip_address:"127.0.0.1",tcp_port:"9091",limit_time:"604800",settings_file_path:"/etc/transmission-daemon/settings.json",cron_expression:"0 * * * *",allowed_media_extensions:"mkv,mp4,avi"}),nconf.load(),Config.check(),Config.settingsFileExists();i=normalize(Config.getParam("settings_file_path"));nconf.file("transmission",i),nconf.load()}setRatio(){this.ratioEnabled=Boolean(Config.getParam("ratio-limit-enabled")),this.ratioEnabled&&(this.ratioLimit=Number(Config.getParam("ratio-limit")))}static check(){var i=Config.getParam("login"),t=Config.getParam("password");if(void 0===i||void 0===t)throw new Error("Login or password must be filled in config file or Environment")}static getParam(i){let t=nconf.get(i);return t=void 0===t?nconf.get(i.toUpperCase()):t}static settingsFileExists(){var i=normalize(Config.getParam("settings_file_path"));if(!existsSync(i))throw new Error("Transmission settings file not found on path "+i)}static extensionsRegexTemplate(i){var t=i.split(",");let e=".(";if(1<t.length)for(const o in t)0===Number(o)?e+=t[o]+"|":Number(o)===t.length-1?e+="|"+t[o]:e+=t[o];else e+=t[0];return e+=")",new RegExp(e,"i")}}export{Config};